alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
nobs=nrow(dat)
nvar=ncol(dat)
#initial values
z=sample(1:nmaxclust,size=nobs,replace=T)
ncat.dat=apply(dat,2,max)
phi=list()
for (i in 1:nvar){
phi[[i]]=matrix(1/ncat.dat[i],nmaxclust,ncat.dat[i])
}
theta=rep(1/nmaxclust,nmaxclust)
#prepare for gibbs
store.phi=list()
for (i in 1:ndata.types){
store.phi[[i]]=matrix(NA,ngibbs,nmaxclust*ncat.dat[i])
}
store.theta=matrix(NA,ngibbs,nmaxclust)
store.loglikel=rep(NA,1)
nobs=nrow(dat)
ndata.types=ncol(dat)
#initial values
z=sample(1:nmaxclust,size=nobs,replace=T)
ncat.dat=apply(dat,2,max)
phi=list()
for (i in 1:ndata.types){
phi[[i]]=matrix(1/ncat.dat[i],nmaxclust,ncat.dat[i])
}
theta=rep(1/nmaxclust,nmaxclust)
#prepare for gibbs
store.phi=list()
for (i in 1:ndata.types){
store.phi[[i]]=matrix(NA,ngibbs,nmaxclust*ncat.dat[i])
}
store.theta=matrix(NA,ngibbs,nmaxclust)
store.loglikel=rep(NA,1)
ndata.types
nobs=nrow(dat)
ndata.types=ncol(dat)
#initial values
z=sample(1:nmaxclust,size=nobs,replace=T)
ncat.dat=apply(dat,2,max)
phi=list()
for (i in 1:ndata.types){
phi[[i]]=matrix(1/ncat.dat[i],nmaxclust,ncat.dat[i])
}
theta=rep(1/nmaxclust,nmaxclust)
#prepare for gibbs
store.phi=list()
for (i in 1:ndata.types){
store.phi[[i]]=matrix(NA,ngibbs,nmaxclust*ncat.dat[i])
}
store.theta=matrix(NA,ngibbs,nmaxclust)
store.loglikel=rep(NA,1)
lphi=list()
for (j in 1:ndata.types) lphi[[j]]=log(phi[[j]])
lprob=matrix(ltheta,nobs,nmaxclust,byrow=T)
for (i in 1:nmaxclust){
for (j in 1:ndata.types){
lprob[,i]=lprob[,i]+lphi[[j]][i,dat[,j]]
}
}
ltheta=log(theta)
lprob=matrix(ltheta,nobs,nmaxclust,byrow=T)
for (i in 1:nmaxclust){
for (j in 1:ndata.types){
lprob[,i]=lprob[,i]+lphi[[j]][i,dat[,j]]
}
}
head(lprob)
max1=apply(lprob,1,max)
lprob=lprob-max1
tmp=exp(lprob)
prob=tmp/rowSums(tmp)
head(prob)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
nobs=nrow(dat)
ndata.types=ncol(dat)
#initial values
z=sample(1:nmaxclust,size=nobs,replace=T)
ncat.dat=apply(dat,2,max)
phi=list()
for (i in 1:ndata.types){
phi[[i]]=matrix(1/ncat.dat[i],nmaxclust,ncat.dat[i])
}
theta=rep(1/nmaxclust,nmaxclust)
#prepare for gibbs
store.phi=list()
for (i in 1:ndata.types){
store.phi[[i]]=matrix(NA,ngibbs,nmaxclust*ncat.dat[i])
}
store.theta=matrix(NA,ngibbs,nmaxclust)
store.loglikel=rep(NA,1)
lphi=list()
for (j in 1:ndata.types) lphi[[j]]=log(phi[[j]])
ltheta=log(theta)
lprob=matrix(ltheta,nobs,nmaxclust,byrow=T)
for (i in 1:nmaxclust){
for (j in 1:ndata.types){
lprob[,i]=lprob[,i]+lphi[[j]][i,dat[,j]]
}
}
max1=apply(lprob,1,max)
lprob=lprob-max1
tmp=exp(lprob)
prob=tmp/rowSums(tmp)
z=rmultinom1(prob=prob, randu=runif(nobs))
z+1
tmp=table(z)
tmp1=rep(0,nmaxclust)
tmp1[as.numeric(names(tmp))]=tmp
tmp
z=sample(1:nmaxclust,size=nobs,replace=T)
tmp=table(z)
tmp1=rep(0,nmaxclust)
tmp1[as.numeric(names(tmp))]=tmp
tmp1
theta=v=rep(NA,nmaxclust)
aux=1
for (i in 1:(nmaxclust+1)){
seq1=(i+1):nmaxclust
v[i]=rbeta(1,tmp1[i],sum(tmp1[seq1]))
theta[i]=v[i]*aux
aux=aux*(1-v[i])
}
tmp=table(z)
tmp1=rep(0,nmaxclust)
tmp1[as.numeric(names(tmp))]=tmp
theta=v=rep(NA,nmaxclust)
aux=1
for (i in 1:(nmaxclust+1)){
seq1=(i+1):nmaxclust
v[i]=rbeta(1,tmp1[i]+1,sum(tmp1[seq1])+gamma1)
theta[i]=v[i]*aux
aux=aux*(1-v[i])
}
i
tmp=table(z)
tmp1=rep(0,nmaxclust)
tmp1[as.numeric(names(tmp))]=tmp
theta=v=rep(NA,nmaxclust)
aux=1
for (i in 1:(nmaxclust-1)){
seq1=(i+1):nmaxclust
v[i]=rbeta(1,tmp1[i]+1,sum(tmp1[seq1])+gamma1)
theta[i]=v[i]*aux
aux=aux*(1-v[i])
}
v
tmp=table(z)
tmp1=rep(0,nmaxclust)
tmp1[as.numeric(names(tmp))]=tmp
theta=v=rep(NA,nmaxclust)
aux=1
for (i in 1:(nmaxclust-1)){
seq1=(i+1):nmaxclust
v[i]=rbeta(1,tmp1[i]+1,sum(tmp1[seq1])+gamma1)
theta[i]=v[i]*aux
aux=aux*(1-v[i])
}
v[nmaxclust]=1
theta[nmaxclust]=aux
sum(theta)
j=1
tmp=data.frame(y=dat[,j],z=z)
table(tmp)
ncat.dat
tmp=matrix(0,ncat.dat[j],nmaxclust)
tab1=data.frame(y=dat[,j],z=z)
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
nomes=rownames(tmp)
rownames(tmp)
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
nomes=rownames(tmp)
nomes
rownames(tmp)
tmp
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
tmp1=table(tmp)
tmp1
rownames(tmp1)
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
tmp1=table(tmp)
tab1[,as.numeric(colnames(tmp1))]=tmp1
tab1
tmp1=tmp1[,-2]
tmp1
tab1=matrix(0,ncat.dat[j],nmaxclust)
tab1[,as.numeric(colnames(tmp1))]=tmp1
tab1
phi=list()
for (j in 1:ndata.types){
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
tmp1=table(tmp)
tab1[,as.numeric(colnames(tmp1))]=tmp1
for (i in 1:nmaxclust){
tmp[i,]=rdirichlet(1,tab1[,i]+alpha)
}
phi[[j]]=tmp
}
phi
phi=list()
j=1
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
tmp1=table(tmp)
tab1[,as.numeric(colnames(tmp1))]=tmp1
for (i in 1:nmaxclust){
tmp[i,]=rdirichlet(1,tab1[,i]+alpha)
}
tmp2=matrix(NA,nmaxclust,ncat.dat[j])
for (i in 1:nmaxclust){
tmp2[i,]=rdirichlet(1,tab1[,i]+alpha)
}
tmp2
phi=list()
for (j in 1:ndata.types){
tab1=matrix(0,ncat.dat[j],nmaxclust)
tmp=data.frame(y=dat[,j],z=z)
tmp1=table(tmp)
tab1[,as.numeric(colnames(tmp1))]=tmp1
tmp2=matrix(NA,nmaxclust,ncat.dat[j])
for (i in 1:nmaxclust){
tmp2[i,]=rdirichlet(1,tab1[,i]+alpha)
}
phi[[j]]=tmp2
}
j
tmp1
dim(tab1)
as.numeric(colnames(tmp1))
tab1[,as.numeric(colnames(tmp1))]=tmp1
dim(tab1)
dim(tmp1)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(4)
#basic settings
nbehavior=6
ncat.data=c(5,8)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
phi[[i]]=rdirichlet(nbehavior,alpha=rep(0.1,ncat.data[i]))
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(4)
#basic settings
nbehavior=6
ncat.data=c(5,8)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
phi[[i]]=rdirichlet(nbehavior,alpha=rep(0.1,ncat.data[i]))
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
#export fake data
setwd('U:\\GIT_models\\mixture_movem')
write.csv(res,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
nobs=nrow(dat)
ndata.types=ncol(dat)
#initial values
z=sample(1:nmaxclust,size=nobs,replace=T)
ncat.dat=apply(dat,2,max)
phi=list()
for (i in 1:ndata.types){
phi[[i]]=matrix(1/ncat.dat[i],nmaxclust,ncat.dat[i])
}
theta=rep(1/nmaxclust,nmaxclust)
#prepare for gibbs
store.phi=list()
for (i in 1:ndata.types){
store.phi[[i]]=matrix(NA,ngibbs,nmaxclust*ncat.dat[i])
}
store.theta=matrix(NA,ngibbs,nmaxclust)
store.loglikel=rep(NA,1)
lphi=list()
for (j in 1:ndata.types) lphi[[j]]=log(phi[[j]])
z=sample.z(ncat.dat=ncat.dat,dat=dat,nmaxclust=nmaxclust,
lphi=lphi,ltheta=log(theta),ndata.types=ndata.types)
theta=sample.v(z=z,gamma1=gamma1,nmaxclust=nmaxclust)
theta
phi=sample.phi(alpha=alpha,nmaxclust=nmaxclust,
ncat.dat=ncat.dat,ndata.types=ndata.types,dat=dat)
dim(phi[[1]])
dim(phi[[2]])
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
res=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
nobs=nrow(dat)
ndata.types=ncol(dat)
#initial values
z=sample(1:nmaxclust,size=nobs,replace=T)
ncat.dat=apply(dat,2,max)
phi=list()
for (i in 1:ndata.types){
phi[[i]]=matrix(1/ncat.dat[i],nmaxclust,ncat.dat[i])
}
theta=rep(1/nmaxclust,nmaxclust)
#prepare for gibbs
store.phi=list()
for (i in 1:ndata.types){
store.phi[[i]]=matrix(NA,ngibbs,nmaxclust*ncat.dat[i])
}
store.theta=matrix(NA,ngibbs,nmaxclust)
store.loglikel=rep(NA,1)
lphi=list()
for (j in 1:ndata.types) lphi[[j]]=log(phi[[j]])
z=sample.z(ncat.dat=ncat.dat,dat=dat,nmaxclust=nmaxclust,
lphi=lphi,ltheta=log(theta),ndata.types=ndata.types)
z
theta=sample.v(z=z,gamma1=gamma1,nmaxclust=nmaxclust)
phi=sample.phi(alpha=alpha,nmaxclust=nmaxclust,
ncat.dat=ncat.dat,ndata.types=ndata.types,dat=dat)
llk=get.llk(phi=phi,theta=theta,ndata.types=ndata.types,dat=dat)
source('U:/GIT_models/mixture_movem/mixmov_gibbs.R', echo=TRUE)
llk
for (j in 1:ndata.types){
store.phi[[j]][i,]=phi[[j]]
}
store.theta[i,]=theta
store.loglikel[i]=llk
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
res=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
res=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
res=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=1000
nburn=ngibbs/2
nmaxclust=10
res=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
?plot
x=1:20
y=runif(length(x))
plot(x,y,type='s')
x=1:20
y=runif(length(x))
plot(x,y,type='s')
plot(c(4,2,1),type='h')
plot(c(4,2,1,1,10),type='h')
plot(x=c(1,2,3,5,10),y=c(4,2,1,1,10),type='h')
plot(x=c(1,1.1,2.5,5,10),y=c(4,2,1,1,10),type='h')
