nburn=ngibbs/2
nmaxclust=10
model1=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=10000
nburn=ngibbs/2
nmaxclust=15
model1=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
seq1=1:ngibbs
plot(model1$loglikel[seq1],type='l')
seq1=1000:ngibbs
plot(model1$loglikel[seq1],type='l')
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
par(mfrow=c(1,1))
theta.estim=model1$theta[ngibbs,]
# theta.estim=store.theta[ngibbs,]
plot(theta.estim,type='h')
library('MCMCpack')
set.seed(6)
#basic settings
nbehavior=10
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=0.5)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
tmp=data.frame(zestim=model1$z,ztrue=z.true)
tmp1=table(tmp); tmp1
tmp1=table(tmp); tmp1
ordem=c(8,2,5,1,9,3,7,4,10,6)
tmp1[ordem,]
#look at phi's
par(mfrow=c(ceiling(ndata.types/2),2),mar=rep(1,4))
for (j in 1:ndata.types){
phi1.estim=matrix(model1$phi[[j]][ngibbs,],nmaxclust,ncat.data[j])
# phi1.estim=matrix(store.phi[[j]][ngibbs,],nmaxclust,ncat.data[j])
compare(phi.true[[j]],phi1.estim[ordem,])
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(3)
#basic settings
nbehavior=3
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=0.5)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(3)
#basic settings
nbehavior=3
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(3)
#basic settings
nbehavior=3
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
#export fake data
setwd('U:\\GIT_models\\mixture_movem')
write.csv(res,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(315)
#basic settings
nbehavior=3
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
#export fake data
setwd('U:\\GIT_models\\mixture_movem')
write.csv(res,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=10000
nburn=ngibbs/2
nmaxclust=15
model1=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
seq1=1:ngibbs
plot(model1$loglikel[seq1],type='l')
seq1=1000:ngibbs
plot(model1$loglikel[seq1],type='l')
seq1=5000:ngibbs
plot(model1$loglikel[seq1],type='l')
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
par(mfrow=c(1,1))
theta.estim=model1$theta[ngibbs,]
# theta.estim=store.theta[ngibbs,]
plot(theta.estim,type='h')
library('MCMCpack')
set.seed(315)
#basic settings
nbehavior=3
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
tmp=data.frame(zestim=model1$z,ztrue=z.true)
tmp1=table(tmp); tmp1
ordem=c(2,1,3)
tmp1[ordem,]
par(mfrow=c(ceiling(ndata.types/2),2),mar=rep(1,4))
for (j in 1:ndata.types){
phi1.estim=matrix(model1$phi[[j]][ngibbs,],nmaxclust,ncat.data[j])
# phi1.estim=matrix(store.phi[[j]][ngibbs,],nmaxclust,ncat.data[j])
compare(phi.true[[j]],phi1.estim[ordem,])
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(319)
#basic settings
nbehavior=5
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
#export fake data
setwd('U:\\GIT_models\\mixture_movem')
write.csv(res,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('MCMCpack')
library('Rcpp')
set.seed(2)
setwd('U:\\GIT_models\\mixture_movem')
source('mixmov_function.R')
source('mixmov_gibbs.R')
sourceCpp('aux1.cpp')
dat=read.csv('fake data.csv',as.is=T)
#prior
gamma1=0.1
alpha=0.1
#prepare for gibbs
ngibbs=10000
nburn=ngibbs/2
nmaxclust=15
model1=mixture_movement(dat=dat,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
seq1=1:ngibbs
plot(model1$loglikel[seq1],type='l')
seq1=5000:ngibbs
plot(model1$loglikel[seq1],type='l')
compare=function(true1,estim1){
rango=range(c(true1,estim1))
plot(true1,estim1,ylim=rango,xlim=rango)
lines(rango,rango,col='red')
}
par(mfrow=c(1,1))
theta.estim=model1$theta[ngibbs,]
# theta.estim=store.theta[ngibbs,]
plot(theta.estim,type='h')
library('MCMCpack')
set.seed(319)
#basic settings
nbehavior=5
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
theta.true=theta=rep(1/nbehavior,nbehavior)
phi.true=phi
#look at these parameters
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[1]][i,],type='h',main=i)
round(apply(phi.true[[1]],2,max),3)
par(mfrow=c(ceiling(nbehavior/2),2),mar=rep(1,4))
for (i in 1:nbehavior) plot(phi.true[[2]][i,],type='h',main=i)
round(apply(phi.true[[2]],2,max),3)
#generate data
nobs=10000
ztmp=rmultinom(nobs,size=1,prob=theta)
z=rep(NA,nobs)
res=matrix(NA,nobs,2)
for (i in 1:nobs){
z[i]=which(ztmp[,i]==1)
y1=rmultinom(1,size=1,prob=phi[[1]][z[i],])
y2=rmultinom(1,size=1,prob=phi[[2]][z[i],])
res[i,]=c(which(y1==1),which(y2==1))
}
table(z)
colnames(res)=c('y1','y2')
z.true=z
for (i in 1:2){
print(c(i,length(unique(res[,i]))))
}
tmp=data.frame(zestim=model1$z,ztrue=z.true)
tmp1=table(tmp); tmp1
tmp=data.frame(zestim=model1$z,ztrue=z.true)
tmp1=table(tmp); tmp1
ordem=c(5,4,1,2,3)
tmp1[ordem,]
par(mfrow=c(ceiling(ndata.types/2),2),mar=rep(1,4))
for (j in 1:ndata.types){
phi1.estim=matrix(model1$phi[[j]][ngibbs,],nmaxclust,ncat.data[j])
# phi1.estim=matrix(store.phi[[j]][ngibbs,],nmaxclust,ncat.data[j])
compare(phi.true[[j]],phi1.estim[ordem,])
}
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(319)
#basic settings
nbehavior=5
ncat.data=c(15,15)
ndata.types=length(ncat.data)
#get parameters
phi=list()
for (i in 1:ndata.types){
tmp=matrix(NA,nbehavior,ncat.data[i])
seq1=1:ncat.data[i]
mus=seq(from=2,to=ncat.data[i],length.out=nbehavior)
diff1=mus[2]-mus[1]
for (j in 1:nbehavior){
aux=dnorm(seq1,mean=mus[j],sd=diff1/4)
tmp[j,]=aux/sum(aux)
}
phi[[i]]=tmp
image(phi[[i]])
}
